Q1)
1) CREATE FUNCTION FN_EMPLOYEEDETAILS()

RETURNS TABLE

AS
 
RETURN (SELECT * FROM EMPLOYEE)



SELECT * FROM FN_EMPLOYEEDETAILS();

2)
 INSERT INTO FN_EMPLOYEEDETAILS() VALUES (8088, 'Ramesh', 'CLERK', 8789, '2022-08-09', 4500.00, NULL, 10)

3)
 CREATE FUNCTION FN_COUNTOFEMPLOYEES()

RETURNS INT

AS

BEGIN 

RETURN (SELECT COUNT(*) FROM EMPLOYEE)

END;



SELECT DBO.FN_COUNTOFEMPLOYEES()  AS COUNT_OF_EMPLOYEES;

4)
 ALTER FUNCTION FN_SEARCHDETAILS()

RETURNS TABLE

AS

RETURN (SELECT * FROM EMPLOYEE WHERE DEPTNO =30 )
 

SELECT * FROM  FN_SEARCHDETAILS();

5)SELECT * FROM FN_EMPLOYEEDETAILS() ORDER  BY empno ASC;

6)
UPDATE FN_EMPLOYEEDETAILS()

SET salary=500 WHERE empno=8088;

SELECT * FROM FN_EMPLOYEEDETAILS();


7)
DELETE FROM FN_EMPLOYEEDETAILS()  WHERE empno=8088;


Q2)

1)
CREATE  PROCEDURE spProductSalesForiPhone
AS BEGIN
DECLARE @StockPresent  INT
SELECT @StockPresent = QUANTITY_REMAINING FROM PRODUCTS WHERE PRODUCT_CODE ='P1';

DECLARE @PRICE INT

SELECT @PRICE = PRICE FROM PRODUCTS WHERE PRODUCT_CODE='P1';

IF (@StockPresent <  1) 

BEGIN

RAISERROR('Not Enough Stock Available',16, 1);

END

ELSE
BEGIN

BEGIN TRY

BEGIN TRAN

UPDATE  PRODUCTS

SET QUANTITY_REMAINING =(QUANTITY_REMAINING - 1)  where PRODUCT_CODE = 'P1';


UPDATE PRODUCTS 

SET QUANTITY_SOLD =(QUANTITY_SOLD + 1)  where PRODUCT_CODE = 'P1';

DECLARE @ORDERID INT

SELECT @ORDERID = CASE WHEN MAX( ORDER_ID) IS NULL THEN 0 else max(ORDER_ID) END FROM Sales



SET @ORDERID = @ORDERID + 1

INSERT INTO Sales VALUES (@ORDERID, GETDATE(),  'P1', 1, @PRICE)

COMMIT TRAN
 
END TRY
 
BEGIN CATCH

ROLLBACK TRAN 

END CATCH

END

END


SELECT * FROM PRODUCTS;

SELECT * FROM SALES;
                                           
2)
ALTER  PROCEDURE spProductSales

@Product_code varchar(20),

@RequiredQuantity INT

AS BEGIN



DECLARE @StockPresent  INT

SELECT @StockPresent = QUANTITY_REMAINING FROM PRODUCTS WHERE PRODUCT_CODE =@Product_code


DECLARE @PRICE INT

SELECT @PRICE = PRICE*@RequiredQuantity  FROM PRODUCTS WHERE PRODUCT_CODE=@Product_code

IF (@StockPresent < @RequiredQuantity)
 
BEGIN

RAISERROR('Not Enough Stock Available',16, 1);

END

ELSE

BEGIN

BEGIN TRY

BEGIN TRAN

UPDATE  PRODUCTS

SET QUANTITY_REMAINING =(QUANTITY_REMAINING - @RequiredQuantity)  where PRODUCT_CODE = @Product_code;


UPDATE PRODUCTS 

SET QUANTITY_SOLD =(QUANTITY_SOLD + @RequiredQuantity)  where PRODUCT_CODE = @Product_code;

DECLARE @ORDERID INT

SELECT @ORDERID = CASE WHEN MAX( ORDER_ID) IS NULL THEN 0 ELSE MAX(ORDER_ID) END FROM Sales



SET @ORDERID = @ORDERID + 1

INSERT INTO Sales VALUES (@ORDERID, GETDATE(),  @Product_code, @RequiredQuantity, @PRICE)

COMMIT TRAN 

END TRY 

BEGIN CATCH

ROLLBACK TRAN 

END CATCH

END

END


spProductSales 'P2', 5;


SELECT * FROM PRODUCTS;

SELECT * FROM SALES;














